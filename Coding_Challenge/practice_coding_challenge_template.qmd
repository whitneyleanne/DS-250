---
title: "Practice Coding Challenge"
subtitle: "Course DS 250"
author: "---AUTHOR"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
---

## Practice Coding Challenge

### Name: Whitney

### Instructions

_In the Final Coding Challenge I will ask you to complete problems about as challenging as what is shown below.  Plus, you will need to fit a machine learning model with data I provide._

_Remember, you will only have 60 minutes to work on the challenge! You will not be able to complete every question perfectly, but you should spend at least a little time on each question._

_Paste your answers and code inside this `.qmd` file._


### Practice Challenges

Start by loading these packages and data:

```{python}

# Scatter plot
scatter = alt.Chart(dat).mark_circle(color='red').encode(
    x=alt.X('hp:Q', title='Horse Power'),
    y=alt.Y('mpg:Q', title='Miles per Gallon')
)

# Annotations
big_text = alt.Chart(dat).mark_text(
    text='Big', 
    align='left',
    baseline='middle',
    dx=5  # Adjust this for offset
).transform_filter(
    (alt.datum.hp > 60) & (alt.datum.hp < 80) & (alt.datum.mpg > 20) & (alt.datum.mpg < 25)
).encode(
    x='hp:Q',
    y='mpg:Q'
)

really_big_text = alt.Chart(dat).mark_text(
    text='Really Big', 
    align='left',
    baseline='middle',
    dx=5  # Adjust this for offset
).transform_filter(
    (alt.datum.hp > 120) & (alt.datum.hp < 140) & (alt.datum.mpg > 15) & (alt.datum.mpg < 20)
).encode(
    x='hp:Q',
    y='mpg:Q'
)

rule1 = alt.Chart(pd.DataFrame({'x': [80]})).mark_rule(color='black').encode(x='x:Q')
rule2 = alt.Chart(pd.DataFrame({'x': [160]})).mark_rule(color='black').encode(x='x:Q')

# Combine all plots and set the title
chart = (scatter + big_text + really_big_text + rule1 + rule2).properties(
    title='This is awesome.'
)






```

<br>

**Question 2:** Try writing code to recreate the following table.

- Have `cyl` on the rows and `carb` on the columns
- The values inside the table represent the number of cars with that particular `cyl`/`carb` combination.
- The `pd.crosstab()` function could be helpful, or maybe `pd.pivot_table()`.


|   cyl |   1 |   2 |   3 |   4 |   6 |   8 |
|------:|----:|----:|----:|----:|----:|----:|
|     4 |   5 |   6 |   0 |   0 |   0 |   0 |
|     6 |   2 |   0 |   0 |   4 |   1 |   0 |
|     8 |   0 |   4 |   3 |   6 |   0 |   1 |

**Question 2 Answer:**

_Show your table here._

**Question 2 Code:**

```{python}
pivot_df = pd.pivot_table(
  df,
  values = 'cyl' / 'carb',
  columns = 'carb',
  rows = 'cyl',
)

dat.assign(

)
```

<br>

**Additional Questions:** On the Final Coding Challenge, I will also ask you to fit a Machine Learning Model. There may be 1-2 additional questions.